generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attivita {
  id             String        @id @db.Uuid
  tipoAttivita   tipo_attivita
  descrizione    String
  idEntita       String?       @db.Uuid
  tipoEntita     tipo_entita?
  userId         String        @db.Uuid
  aziendaId      String        @db.Uuid
  datiAggiuntivi Json?
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  aziende        aziende       @relation(fields: [aziendaId], references: [id])
  users          users         @relation(fields: [userId], references: [id])

  @@index([aziendaId])
  @@index([createdAt])
  @@index([tipoAttivita])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model aziende {
  id            String       @id @db.Uuid
  nome          String
  partitaIva    String       @unique
  codiceFiscale String?
  indirizzo     String?
  citta         String?
  cap           String?
  telefono      String?
  email         String?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @db.Timestamptz(6)
  attivita      attivita[]
  dipendenti    dipendenti[]
  sedi          sedi[]
  users         users[]
}

model buste_paga {
  id                String     @id @db.Uuid
  mese              Int
  anno              Int
  retribuzioneLorda Decimal    @db.Decimal(10, 2)
  straordinari      Decimal    @default(0) @db.Decimal(10, 2)
  altreCompetenze   Decimal    @default(0) @db.Decimal(10, 2)
  totaleLordo       Decimal    @db.Decimal(10, 2)
  contributiINPS    Decimal    @db.Decimal(10, 2)
  irpef             Decimal    @db.Decimal(10, 2)
  altreRitenute     Decimal    @default(0) @db.Decimal(10, 2)
  totaleRitenute    Decimal    @db.Decimal(10, 2)
  netto             Decimal    @db.Decimal(10, 2)
  tfr               Decimal    @db.Decimal(10, 2)
  oreLavorate       Decimal    @db.Decimal(6, 2)
  oreStraordinario  Decimal    @default(0) @db.Decimal(6, 2)
  storagePath       String?
  dipendenteId      String     @db.Uuid
  createdAt         DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime   @db.Timestamptz(6)
  dipendenti        dipendenti @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@unique([dipendenteId, mese, anno])
  @@index([anno, mese])
  @@index([dipendenteId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dipendenti {
  id             String           @id @db.Uuid
  nome           String
  cognome        String
  codiceFiscale  String           @unique
  dataNascita    DateTime         @db.Date
  luogoNascita   String?
  indirizzo      String?
  citta          String?
  cap            String?
  telefono       String?
  email          String?
  iban           String?
  dataAssunzione DateTime         @db.Date
  tipoContratto  tipo_contratto
  ccnl           ccnl
  livello        String
  retribuzione   Decimal          @db.Decimal(10, 2)
  oreSettimanali Int              @default(40)
  aziendaId      String           @db.Uuid
  sedeId         String?          @db.Uuid
  attivo         Boolean          @default(true)
  dataCessazione DateTime?        @db.Date
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @db.Timestamptz(6)
  buste_paga     buste_paga[]
  aziende        aziende          @relation(fields: [aziendaId], references: [id], onDelete: Cascade)
  sedi           sedi?            @relation(fields: [sedeId], references: [id])
  documenti      documenti[]
  ferie_permessi ferie_permessi[]
  presenze       presenze[]
  turni          turni[]

  @@index([aziendaId])
  @@index([codiceFiscale])
}

model documenti {
  id           String         @id @db.Uuid
  tipo         tipo_documento
  numero       String?
  dataRilascio DateTime?      @db.Date
  dataScadenza DateTime?      @db.Date
  storagePath  String
  fileName     String
  fileSize     Int?
  mimeType     String?
  dipendenteId String         @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  dipendenti   dipendenti     @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([dataScadenza])
  @@index([dipendenteId])
}

model ferie_permessi {
  id           String          @id @db.Uuid
  tipo         tipo_assenza
  dataInizio   DateTime        @db.Date
  dataFine     DateTime        @db.Date
  giorni       Int
  stato        stato_richiesta @default(IN_ATTESA)
  motivazione  String?
  dipendenteId String          @db.Uuid
  createdAt    DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime        @db.Timestamptz(6)
  dipendenti   dipendenti      @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([dipendenteId])
  @@index([stato])
}

model presenze {
  id               String     @id @db.Uuid
  data             DateTime   @db.Date
  entrata          DateTime?  @db.Timestamptz(6)
  uscita           DateTime?  @db.Timestamptz(6)
  oreLavorate      Decimal?   @db.Decimal(5, 2)
  oreStraordinario Decimal?   @db.Decimal(5, 2)
  nota             String?
  dipendenteId     String     @db.Uuid
  createdAt        DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime   @db.Timestamptz(6)
  dipendenti       dipendenti @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([data])
  @@index([dipendenteId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sedi {
  id         String       @id @db.Uuid
  nome       String
  indirizzo  String?
  citta      String?
  aziendaId  String       @db.Uuid
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @db.Timestamptz(6)
  dipendenti dipendenti[]
  aziende    aziende      @relation(fields: [aziendaId], references: [id], onDelete: Cascade)
  turni      turni[]
}

model turni {
  id           String     @id @db.Uuid
  data         DateTime   @db.Date
  oraInizio    String
  oraFine      String
  tipoTurno    tipo_turno
  dipendenteId String     @db.Uuid
  sedeId       String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  dipendenti   dipendenti @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)
  sedi         sedi?      @relation(fields: [sedeId], references: [id])

  @@index([data])
  @@index([dipendenteId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id        String     @id @db.Uuid
  email     String     @unique
  name      String?
  role      user_role  @default(USER)
  aziendaId String?    @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @db.Timestamptz(6)
  attivita  attivita[]
  aziende   aziende?   @relation(fields: [aziendaId], references: [id])
}

enum ccnl {
  TURISMO
  COMMERCIO
  METALMECCANICI
  ALTRO
}

enum stato_richiesta {
  IN_ATTESA
  APPROVATA
  RIFIUTATA
}

enum tipo_assenza {
  FERIE
  PERMESSO
  MALATTIA
  CONGEDO
}

enum tipo_attivita {
  CREAZIONE_DIPENDENTE
  MODIFICA_DIPENDENTE
  ELIMINAZIONE_DIPENDENTE
  REGISTRAZIONE_PRESENZA
  MODIFICA_PRESENZA
  GENERAZIONE_BUSTA_PAGA
  RICHIESTA_FERIE
  APPROVAZIONE_FERIE
  RIFIUTO_FERIE
}

enum tipo_contratto {
  TEMPO_INDETERMINATO
  TEMPO_DETERMINATO
  APPRENDISTATO
  STAGIONALE
  PARTTIME
}

enum tipo_documento {
  CARTA_IDENTITA
  PERMESSO_SOGGIORNO
  CODICE_FISCALE
  CONTRATTO
  VISITA_MEDICA
  ALTRO
}

enum tipo_entita {
  DIPENDENTE
  PRESENZA
  BUSTA_PAGA
  FERIE_PERMESSI
}

enum tipo_turno {
  MATTINA
  PRANZO
  SERA
  NOTTE
  SPEZZATO
}

enum user_role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}
