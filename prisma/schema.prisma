generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  email     String     @unique
  name      String?
  role      UserRole   @default(USER)
  aziendaId String?    @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
  attivita  Attivita[]
  azienda   Azienda?   @relation(fields: [aziendaId], references: [id])

  @@map("users")
}

model Azienda {
  id            String       @id @default(uuid()) @db.Uuid
  nome          String
  partitaIva    String       @unique
  codiceFiscale String?
  indirizzo     String?
  citta         String?
  cap           String?
  telefono      String?
  email         String?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @updatedAt @db.Timestamptz(6)
  attivita      Attivita[]
  dipendenti    Dipendente[]
  sedi          Sede[]
  users         User[]

  @@map("aziende")
}

model Sede {
  id         String       @id @default(uuid()) @db.Uuid
  nome       String
  indirizzo  String?
  citta      String?
  aziendaId  String       @db.Uuid
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt @db.Timestamptz(6)
  dipendenti Dipendente[]
  azienda    Azienda      @relation(fields: [aziendaId], references: [id], onDelete: Cascade)
  turni      Turno[]

  @@map("sedi")
}

model Dipendente {
  id             String          @id @default(uuid()) @db.Uuid
  nome           String
  cognome        String
  codiceFiscale  String          @unique
  dataNascita    DateTime        @db.Date
  luogoNascita   String?
  indirizzo      String?
  citta          String?
  cap            String?
  telefono       String?
  email          String?
  iban           String?
  dataAssunzione DateTime        @db.Date
  tipoContratto  TipoContratto
  ccnl           CCNL
  livello        String
  retribuzione   Decimal         @db.Decimal(10, 2)
  oreSettimanali Int             @default(40)
  aziendaId      String          @db.Uuid
  sedeId         String?         @db.Uuid
  attivo         Boolean         @default(true)
  dataCessazione DateTime?       @db.Date
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(6)
  bustePaga      BustaPaga[]
  azienda        Azienda         @relation(fields: [aziendaId], references: [id], onDelete: Cascade)
  sede           Sede?           @relation(fields: [sedeId], references: [id])
  documenti      Documento[]
  feriePermessi  FeriePermessi[]
  presenze       Presenza[]
  turni          Turno[]

  @@index([aziendaId])
  @@index([codiceFiscale])
  @@map("dipendenti")
}

model Documento {
  id           String        @id @default(uuid()) @db.Uuid
  tipo         TipoDocumento
  numero       String?
  dataRilascio DateTime?     @db.Date
  dataScadenza DateTime?     @db.Date
  storagePath  String
  fileName     String
  fileSize     Int?
  mimeType     String?
  dipendenteId String        @db.Uuid
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  dipendente   Dipendente    @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([dipendenteId])
  @@index([dataScadenza])
  @@map("documenti")
}

model Presenza {
  id               String     @id @default(uuid()) @db.Uuid
  data             DateTime   @db.Date
  entrata          DateTime?  @db.Timestamptz(6)
  uscita           DateTime?  @db.Timestamptz(6)
  oreLavorate      Decimal?   @db.Decimal(5, 2)
  oreStraordinario Decimal?   @db.Decimal(5, 2)
  nota             String?
  dipendenteId     String     @db.Uuid
  createdAt        DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime   @updatedAt @db.Timestamptz(6)
  dipendente       Dipendente @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([dipendenteId])
  @@index([data])
  @@map("presenze")
}

model Turno {
  id           String     @id @default(uuid()) @db.Uuid
  data         DateTime   @db.Date
  oraInizio    String
  oraFine      String
  tipoTurno    TipoTurno
  dipendenteId String     @db.Uuid
  sedeId       String?    @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  dipendente   Dipendente @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)
  sede         Sede?      @relation(fields: [sedeId], references: [id])

  @@index([dipendenteId])
  @@index([data])
  @@map("turni")
}

model FeriePermessi {
  id           String         @id @default(uuid()) @db.Uuid
  tipo         TipoAssenza
  dataInizio   DateTime       @db.Date
  dataFine     DateTime       @db.Date
  giorni       Int
  stato        StatoRichiesta @default(IN_ATTESA)
  motivazione  String?
  dipendenteId String         @db.Uuid
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(6)
  dipendente   Dipendente     @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@index([dipendenteId])
  @@index([stato])
  @@map("ferie_permessi")
}

model BustaPaga {
  id                String     @id @default(uuid()) @db.Uuid
  mese              Int
  anno              Int
  retribuzioneLorda Decimal    @db.Decimal(10, 2)
  straordinari      Decimal    @default(0) @db.Decimal(10, 2)
  altreCompetenze   Decimal    @default(0) @db.Decimal(10, 2)
  totaleLordo       Decimal    @db.Decimal(10, 2)
  contributiINPS    Decimal    @db.Decimal(10, 2)
  irpef             Decimal    @db.Decimal(10, 2)
  altreRitenute     Decimal    @default(0) @db.Decimal(10, 2)
  totaleRitenute    Decimal    @db.Decimal(10, 2)
  netto             Decimal    @db.Decimal(10, 2)
  tfr               Decimal    @db.Decimal(10, 2)
  oreLavorate       Decimal    @db.Decimal(6, 2)
  oreStraordinario  Decimal    @default(0) @db.Decimal(6, 2)
  storagePath       String?
  dipendenteId      String     @db.Uuid
  createdAt         DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime   @updatedAt @db.Timestamptz(6)
  dipendente        Dipendente @relation(fields: [dipendenteId], references: [id], onDelete: Cascade)

  @@unique([dipendenteId, mese, anno])
  @@index([dipendenteId])
  @@index([anno, mese])
  @@map("buste_paga")
}

model Attivita {
  id             String       @id @default(uuid()) @db.Uuid
  tipoAttivita   TipoAttivita
  descrizione    String
  idEntita       String?      @db.Uuid
  tipoEntita     TipoEntita?
  userId         String       @db.Uuid
  aziendaId      String       @db.Uuid
  datiAggiuntivi Json?
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  azienda        Azienda      @relation(fields: [aziendaId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([aziendaId])
  @@index([userId])
  @@index([tipoAttivita])
  @@index([createdAt])
  @@map("attivita")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER

  @@map("user_role")
}

enum TipoContratto {
  TEMPO_INDETERMINATO
  TEMPO_DETERMINATO
  APPRENDISTATO
  STAGIONALE
  PARTTIME

  @@map("tipo_contratto")
}

enum CCNL {
  TURISMO
  COMMERCIO
  METALMECCANICI
  ALTRO

  @@map("ccnl")
}

enum TipoDocumento {
  CARTA_IDENTITA
  PERMESSO_SOGGIORNO
  CODICE_FISCALE
  CONTRATTO
  VISITA_MEDICA
  ALTRO

  @@map("tipo_documento")
}

enum TipoTurno {
  MATTINA
  PRANZO
  SERA
  NOTTE
  SPEZZATO

  @@map("tipo_turno")
}

enum TipoAssenza {
  FERIE
  PERMESSO
  MALATTIA
  CONGEDO

  @@map("tipo_assenza")
}

enum StatoRichiesta {
  IN_ATTESA
  APPROVATA
  RIFIUTATA

  @@map("stato_richiesta")
}

enum TipoAttivita {
  CREAZIONE_DIPENDENTE
  MODIFICA_DIPENDENTE
  ELIMINAZIONE_DIPENDENTE
  REGISTRAZIONE_PRESENZA
  MODIFICA_PRESENZA
  GENERAZIONE_BUSTA_PAGA
  RICHIESTA_FERIE
  APPROVAZIONE_FERIE
  RIFIUTO_FERIE

  @@map("tipo_attivita")
}

enum TipoEntita {
  DIPENDENTE
  PRESENZA
  BUSTA_PAGA
  FERIE_PERMESSI

  @@map("tipo_entita")
}
